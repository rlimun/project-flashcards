{"ast":null,"code":"var _jsxFileName = \"/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useHistory, Route, Switch } from \"react-router-dom\";\nimport { deleteDeck, listDecks } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [decks, setDecks] = useState([]);\n  const history = useHistory();\n  useEffect(() => {\n    // Fetch and update decks when the component mounts\n    const fetchData = async () => {\n      // This function inside uesEffect will be executed after the component has been rendered\n      const data = await listDecks(); // Call utility function listDecks() which makes an asynchronous request to API to get a list of decks; await keyword is used to wait for the promise to resolve\n      setDecks(data || []);\n    }; // if data is truthy (API call was successful and it returned data) then set the state to 'data', if it is falsy, set the state to empty array []\n\n    fetchData(); // Invoked when component mounts (ensures that the decks are fetched and the component state is updated with the latest data when the component is first rendered)\n  }, []); // [] is the dependency sarray and it is saying that the effect will only run once when the component mounts\n\n  const handleStudyClick = deckId => {\n    history.push(`/decks/${deckId}/study`);\n  };\n  const handleCreateDeckClick = deckId => {\n    history.push(\"/decks/new\");\n  };\n  /** \n  * Delete Deck prompt\n  * When the user clicks the Delete button, a warning message is shown and the user can click OK or Cancel. \n  * If the user clicks OK, the deck is deleted and the deleted deck is no longer visible on the Home screen.\n  **/\n  const handleDelete = deckId => {\n    const confirmed = window.confirm('Delete this deck? You will not be able to recover it');\n    if (confirmed) {\n      deleteDeck(deckId);\n      setDecks(decks.filter(deck => deck.id !== deckId));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Switch, {\n      children: /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        children: /*#__PURE__*/_jsxDEV(Home, {\n          handleStudyClick: handleStudyClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: \"/decks/new\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Create Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this), decks.map(deck => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: `/decks/${deck.id}`,\n        children: [\"Deck \", deck.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/decks/${deck.id}/study`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          name: \"study\",\n          onClick: () => handleStudyClick(deck.id),\n          children: \"Study\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/decks/${deck.id}`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        name: \"delete\",\n        onClick: () => handleDelete(deck.id),\n        children: \" Delete \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 15\n      }, this)]\n    }, deck.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true);\n};\n_s(Home, \"G11efxXmh2SE3Q3tr6boo37MplY=\", false, function () {\n  return [useHistory];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Link","useHistory","Route","Switch","deleteDeck","listDecks","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","decks","setDecks","history","fetchData","data","handleStudyClick","deckId","push","handleCreateDeckClick","handleDelete","confirmed","window","confirm","filter","deck","id","children","exact","path","fileName","_jsxFileName","lineNumber","columnNumber","to","map","name","onClick","_c","$RefreshReg$"],"sources":["/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Home.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, useHistory, Route, Switch } from \"react-router-dom\";\nimport { deleteDeck, listDecks } from \"../utils/api\";\n\n\nconst Home = () => {\n\n    const [decks, setDecks] = useState([]);\n    const history = useHistory();\n\n    useEffect(() => {\n        // Fetch and update decks when the component mounts\n        const fetchData = async () => { // This function inside uesEffect will be executed after the component has been rendered\n            const data = await listDecks(); // Call utility function listDecks() which makes an asynchronous request to API to get a list of decks; await keyword is used to wait for the promise to resolve\n            setDecks(data || []); \n        }; // if data is truthy (API call was successful and it returned data) then set the state to 'data', if it is falsy, set the state to empty array []\n    \n        fetchData(); // Invoked when component mounts (ensures that the decks are fetched and the component state is updated with the latest data when the component is first rendered)\n    }, []); // [] is the dependency sarray and it is saying that the effect will only run once when the component mounts\n\n    const handleStudyClick = (deckId) => {\n        history.push(`/decks/${deckId}/study`);\n    }\n\n    const handleCreateDeckClick = (deckId) => {\n        history.push(\"/decks/new\");\n    }\n    /** \n    * Delete Deck prompt\n    * When the user clicks the Delete button, a warning message is shown and the user can click OK or Cancel. \n    * If the user clicks OK, the deck is deleted and the deleted deck is no longer visible on the Home screen.\n    **/\n    const handleDelete = (deckId) => {\n        const confirmed = window.confirm('Delete this deck? You will not be able to recover it');\n        if (confirmed) {\n            deleteDeck(deckId);\n            setDecks(decks.filter((deck) => deck.id !== deckId));\n        }\n    }\n\n  return (\n    <>\n        <Switch>\n            <Route exact path=\"/\">\n                <Home handleStudyClick={handleStudyClick}/>\n            </Route>\n        </Switch>\n        {/* A Create Deck button is shown, and clicking it brings the user to the Create Deck screen. */}\n        <Link to=\"/decks/new\">\n            <button>Create Deck</button>\n        </Link>\n        {/*Existing decks are each shown with the deck name, the number of cards, and a Study, View, and Delete button.*/}\n        { decks.map((deck) => (\n            <div key={ deck.id }>\n              <Link to={`/decks/${deck.id}`}>Deck {deck.id}</Link>\n              {/* Clicking the Study button brings the user to the Study screen. */}\n              <Link to={`/decks/${deck.id}/study`}>\n                <button name=\"study\" onClick={() => handleStudyClick(deck.id)}>Study</button>\n                </Link>\n              {/*Clicking the View button brings the user to the Deck screen.*/}\n              <Link to={`/decks/${deck.id}`}>\n                <button>View</button>\n                </Link>\n              {/*Clicking the Delete button shows a warning message before deleting the deck.*/}\n              <button name=\"delete\" onClick={() => handleDelete(deck.id)}> Delete </button>\n            </div>\n            ))\n        }\n    </>\n  );\n}\n\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
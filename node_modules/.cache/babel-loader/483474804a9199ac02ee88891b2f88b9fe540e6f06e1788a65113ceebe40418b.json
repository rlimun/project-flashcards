{"ast":null,"code":"var _jsxFileName = \"/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useHistory, Route, Switch } from \"react-router-dom\";\nimport { deleteDeck, listDecks } from \"../utils/api\";\nimport Study from \"./Study\";\nimport CreateDeck from \"./CreateDeck\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [decks, setDecks] = useState([]);\n  const history = useHistory();\n  useEffect(() => {\n    // Fetch and update decks when the component mounts\n    const fetchData = async () => {\n      // This function inside uesEffect will be executed after the component has been rendered\n      const data = await listDecks(); // Call utility function listDecks() which makes an asynchronous request to API to get a list of decks; await keyword is used to wait for the promise to resolve\n      setDecks(data || []);\n    }; // if data is truthy (API call was successful and it returned data) then set the state to 'data', if it is falsy, set the state to empty array []\n\n    fetchData(); // Invoked when component mounts (ensures that the decks are fetched and the component state is updated with the latest data when the component is first rendered)\n  }, []); // [] is the dependency sarray and it is saying that the effect will only run once when the component mounts\n\n  const handleStudyClick = deckId => {\n    history.push(`/decks/${deckId}/study`);\n  };\n  const handleCreateDeckClick = deckId => {\n    history.push(\"/decks/new\");\n  };\n  const handleViewClick = deckId => {\n    history.push(`/decks/${deckId}`);\n  };\n  /** \n  * Delete Deck prompt\n  * When the user clicks the Delete button, a warning message is shown and the user can click OK or Cancel. \n  * If the user clicks OK, the deck is deleted and the deleted deck is no longer visible on the Home screen.\n  **/\n  const handleDelete = deckId => {\n    const confirmed = window.confirm('Delete this deck? You will not be able to recover it');\n    if (confirmed) {\n      deleteDeck(deckId);\n      setDecks(decks.filter(deck => deck.id !== deckId));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        children: [/*#__PURE__*/_jsxDEV(Home\n        // A Create Deck button is shown, and clicking it brings the user to the Create Deck screen.\n        , {\n          handleCreateDeckClick: handleCreateDeckClick\n          // Clicking the Study button brings the user to the Study screen. \n          ,\n          handleStudyClick: handleStudyClick\n          // Clicking the View button brings the user to the Deck screen.\n          ,\n          handleViewClick: handleViewClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          name: \"delete\",\n          onClick: () => handleDelete(deckId),\n          children: \" Delete \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/decks/:deckId/study\",\n        component: Study\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/decks/new\",\n        component: CreateDeck\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n/*\n { decks.map((deck) => (\n                    <div key={ deck.id }>\n                    <Link to={`/decks/${deck.id}`}>Deck {deck.id}</Link>\n              \n*/\n_s(Home, \"G11efxXmh2SE3Q3tr6boo37MplY=\", false, function () {\n  return [useHistory];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","useHistory","Route","Switch","deleteDeck","listDecks","Study","CreateDeck","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","decks","setDecks","history","fetchData","data","handleStudyClick","deckId","push","handleCreateDeckClick","handleViewClick","handleDelete","confirmed","window","confirm","filter","deck","id","children","exact","path","fileName","_jsxFileName","lineNumber","columnNumber","name","onClick","component","_c","$RefreshReg$"],"sources":["/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Home.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useHistory, Route, Switch } from \"react-router-dom\";\nimport { deleteDeck, listDecks } from \"../utils/api\";\nimport Study from \"./Study\";\nimport CreateDeck from \"./CreateDeck\";\n\n\nconst Home = () => {\n\n    const [decks, setDecks] = useState([]);\n    const history = useHistory();\n\n    useEffect(() => {\n        // Fetch and update decks when the component mounts\n        const fetchData = async () => { // This function inside uesEffect will be executed after the component has been rendered\n            const data = await listDecks(); // Call utility function listDecks() which makes an asynchronous request to API to get a list of decks; await keyword is used to wait for the promise to resolve\n            setDecks(data || []); \n        }; // if data is truthy (API call was successful and it returned data) then set the state to 'data', if it is falsy, set the state to empty array []\n    \n        fetchData(); // Invoked when component mounts (ensures that the decks are fetched and the component state is updated with the latest data when the component is first rendered)\n    }, []); // [] is the dependency sarray and it is saying that the effect will only run once when the component mounts\n\n    const handleStudyClick = (deckId) => {\n        history.push(`/decks/${deckId}/study`);\n    }\n\n    const handleCreateDeckClick = (deckId) => {\n        history.push(\"/decks/new\");\n    }\n\n    const handleViewClick = (deckId) => {\n        history.push(`/decks/${deckId}`);\n    }\n    /** \n    * Delete Deck prompt\n    * When the user clicks the Delete button, a warning message is shown and the user can click OK or Cancel. \n    * If the user clicks OK, the deck is deleted and the deleted deck is no longer visible on the Home screen.\n    **/\n    const handleDelete = (deckId) => {\n        const confirmed = window.confirm('Delete this deck? You will not be able to recover it');\n        if (confirmed) {\n            deleteDeck(deckId);\n            setDecks(decks.filter((deck) => deck.id !== deckId));\n        }\n    }\n\n  return (\n    <>\n        <Switch>\n            <Route exact path=\"/\">\n                <Home \n                    // A Create Deck button is shown, and clicking it brings the user to the Create Deck screen.\n                    handleCreateDeckClick={ handleCreateDeckClick }\n                    // Clicking the Study button brings the user to the Study screen. \n                    handleStudyClick={ handleStudyClick }\n                    // Clicking the View button brings the user to the Deck screen.\n                    handleViewClick={ handleViewClick }\n                />\n                <Home />\n              {/*Clicking the Delete button shows a warning message before deleting the deck.*/}\n              <button name=\"delete\" onClick={() => handleDelete(deckId)}> Delete </button>\n            </Route>\n            <Route path=\"/decks/:deckId/study\" component={Study} />\n            <Route path=\"/decks/new\" component={CreateDeck} />\n        </Switch>\n    </>\n  );\n}\n\n/*\n { decks.map((deck) => (\n                    <div key={ deck.id }>\n                    <Link to={`/decks/${deck.id}`}>Deck {deck.id}</Link>\n              \n*/\n\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
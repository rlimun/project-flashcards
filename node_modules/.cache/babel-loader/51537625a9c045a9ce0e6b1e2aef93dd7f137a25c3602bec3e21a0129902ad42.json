{"ast":null,"code":"var _jsxFileName = \"/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Study.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// import React, { useState, useEffect } from \"react\";\n// import { readDeck } from \"../utils/api\";\n// import { useParams, useHistory, Link } from \"react-router-dom\";\n\nconst Study = () => {\n  //     const { deckId } = useParams();\n  //     const [ deck, setDecks ]  = useState([]);\n  //     const [ cards, setCards ] = useState([]);\n  //     const [ isFront, setIsFront ] = useState(true);\n  //     const [ cardNumber, setCardNumber ]  = useState(1);\n  //     const history = useHistory();\n\n  //     //First fetch the data and load the deck\n  //     useEffect(() => {\n  //         async function fetchData() {\n  //             const abortController = new AbortController();\n  //             try {\n  //                 //You must use the readDeck() function from src/utils/api/index.js to load the deck that is being studied.\n  //                 const data = await readDeck(deckId, abortController.signal);\n  //                 setDecks(data);\n  //             } catch(error) {\n  //                 console.error(\"error\", error);\n  //             }\n  //             return () => {\n  //                 abortController.abort();\n  //             };\n  //         }\n  //         fetchData();\n  //     }, []);\n\n  //     /*\n\n  //     */\n  //     function flipCard(){\n  //         if(isFront){\n  //             setIsFront(false);\n  //         }\n  //         else {\n  //             setIsFront(true);\n  //         }\n  //     }\n\n  //      //this will happen if the next button is clicked on a card\n  //     function nextCard(index){\n  //         const restartDeckConfirmed = window.confirm(\"Restart cards? Click 'cancel' to return to the homepage\");\n  //         if(index < cards.length){\n  //             setCardNumber(cardNumber+1);\n  //             setIsFront(true);\n  //         } else {\n  //             if(restartDeckConfirmed){\n  //                 setCardNumber(1);\n  //                 setIsFront(true);\n  //             }\n  //             else {\n  //                 history.push(\"/\");\n  //             }\n  //         }\n  //     }\n\n  //     const notEnoughCards = (\n  //         <>\n  //             <p>Not enough cards</p>\n  //             <button>Add Cards</button>\n  //         </>\n\n  //     )\n\n  //      /*\n  //     There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied, \n  //     and finally the text Study (e.g., Home/Rendering In React/Study).\n  //     */\n  //     const breadcrumb = (\n  //         <nav>\n  //             <ol className=\"breadcrumb\">\n  //                 <li className=\"breadcrumb-item\">\n  //                     <Link to=\"/\">Home</Link>\n  //                 </li>\n  //                 <li className=\"breadcrumb-item\">\n  //                     <Link to={`/decks/${deck.id}`}>{deck.name}</Link>\n  //                 </li>\n  //                 <li className=\"breadcrumb-item\">\n  //                     Study\n  //                 </li>\n  //             </ol>\n  //         </nav>\n  //     )\n\n  //     if(cards.length <= 2){\n  //         return (\n  //             <>\n  //             {breadcrumb}\n  //             {notEnoughCards}\n  //             </>\n  //         )\n  //     }\n  //     else{\n  //         return (\n  //             <>\n  //             {/*The deck title (i.e., \"Study: Rendering in React\" ) is shown on the screen.*/}\n  //             <title>${deck.title}</title>\n  //                 <p>You got to the study page</p>\n  //                 { cards.map((card) => (\n  //                     <div key={card.id}>\n  //                         <h4>{card.id} of {cards.length}</h4>\n  //                         <p>{card.front}</p>\n  //                         <button>Flip</button>\n  //                         <button>Next</button>\n  //                     </div>\n  //                 ))}\n  //             </>\n  //         )\n  //     }\n  // }\n  return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"testing\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_c = Study;\nexport default Study;\nvar _c;\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"names":["Study","_jsxDEV","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Study.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\n// import { readDeck } from \"../utils/api\";\n// import { useParams, useHistory, Link } from \"react-router-dom\";\n\n const Study = () => {\n//     const { deckId } = useParams();\n//     const [ deck, setDecks ]  = useState([]);\n//     const [ cards, setCards ] = useState([]);\n//     const [ isFront, setIsFront ] = useState(true);\n//     const [ cardNumber, setCardNumber ]  = useState(1);\n//     const history = useHistory();\n\n//     //First fetch the data and load the deck\n//     useEffect(() => {\n//         async function fetchData() {\n//             const abortController = new AbortController();\n//             try {\n//                 //You must use the readDeck() function from src/utils/api/index.js to load the deck that is being studied.\n//                 const data = await readDeck(deckId, abortController.signal);\n//                 setDecks(data);\n//             } catch(error) {\n//                 console.error(\"error\", error);\n//             }\n//             return () => {\n//                 abortController.abort();\n//             };\n//         }\n//         fetchData();\n//     }, []);\n\n//     /*\n        \n//     */\n//     function flipCard(){\n//         if(isFront){\n//             setIsFront(false);\n//         }\n//         else {\n//             setIsFront(true);\n//         }\n//     }\n\n//      //this will happen if the next button is clicked on a card\n//     function nextCard(index){\n//         const restartDeckConfirmed = window.confirm(\"Restart cards? Click 'cancel' to return to the homepage\");\n//         if(index < cards.length){\n//             setCardNumber(cardNumber+1);\n//             setIsFront(true);\n//         } else {\n//             if(restartDeckConfirmed){\n//                 setCardNumber(1);\n//                 setIsFront(true);\n//             }\n//             else {\n//                 history.push(\"/\");\n//             }\n//         }\n//     }\n    \n//     const notEnoughCards = (\n//         <>\n//             <p>Not enough cards</p>\n//             <button>Add Cards</button>\n//         </>\n\n//     )\n\n//      /*\n//     There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied, \n//     and finally the text Study (e.g., Home/Rendering In React/Study).\n//     */\n//     const breadcrumb = (\n//         <nav>\n//             <ol className=\"breadcrumb\">\n//                 <li className=\"breadcrumb-item\">\n//                     <Link to=\"/\">Home</Link>\n//                 </li>\n//                 <li className=\"breadcrumb-item\">\n//                     <Link to={`/decks/${deck.id}`}>{deck.name}</Link>\n//                 </li>\n//                 <li className=\"breadcrumb-item\">\n//                     Study\n//                 </li>\n//             </ol>\n//         </nav>\n//     )\n    \n//     if(cards.length <= 2){\n//         return (\n//             <>\n//             {breadcrumb}\n//             {notEnoughCards}\n//             </>\n//         )\n//     }\n//     else{\n//         return (\n//             <>\n//             {/*The deck title (i.e., \"Study: Rendering in React\" ) is shown on the screen.*/}\n//             <title>${deck.title}</title>\n//                 <p>You got to the study page</p>\n//                 { cards.map((card) => (\n//                     <div key={card.id}>\n//                         <h4>{card.id} of {cards.length}</h4>\n//                         <p>{card.front}</p>\n//                         <button>Flip</button>\n//                         <button>Next</button>\n//                     </div>\n//                 ))}\n//             </>\n//         )\n//     }\n // }\n return (\n    <p>testing</p>\n )\n }\n\n\n export default Study;"],"mappings":";;AAAA;AACA;AACA;;AAEC,MAAMA,KAAK,GAAGA,CAAA,KAAM;EACroBACGC,OAAA;IAAAC,QAAA,EAAG;EAAO;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC;AAEjB,CAAC;AAAAC,EAAA,GAhHKP,KAAK;AAmHX,eAAeA,KAAK;AAAC,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
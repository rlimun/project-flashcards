{"ast":null,"code":"var _jsxFileName = \"/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Study.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { readDeck } from \"../utils/api\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Study = () => {\n  _s();\n  const {\n    deckId\n  } = useParams();\n  const [selectedDeck, setSelectedDeck] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isFront, setIsFront] = useState(true);\n  //note: useState initializes a state variable named numCards with an initial value of 0 and setNumCards is a setter function used to update the value of numCards\n  const [numCards, setNumCards] = useState(0);\n  const [currentCardIndex, setCurrentCardIndex] = useState(0);\n  const history = useHistory();\n\n  //First fetch the data and load the deck\n  useEffect(() => {\n    async function fetchData() {\n      const abortController = new AbortController();\n      try {\n        //You must use the readDeck() function from src/utils/api/index.js to load the deck that is being studied.\n        const data = await readDeck(deckId, abortController.signal);\n        //note: since numCards is a state variable, we can use it anywhere outside of useEffect\n        const numCards = data.cards.length; //getting the number of cards and setting it to variable\n        setSelectedDeck(data); //set the data to the state\n      } catch (error) {\n        console.error(\"error\", error);\n      } finally {\n        setLoading(false);\n        abortController.abort();\n      }\n      ;\n    }\n    fetchData();\n    //note: deckId is dependency array and means that the effect (fetchData) function will only run when the value of deckId changes\n    //note: if deckId remains the same between renders, the effect will not be re-executed\n  }, [deckId]);\n\n  /*\n      \n  */\n  function flipCard() {\n    if (isFront) {\n      setIsFront(false);\n    } else {\n      setIsFront(true);\n    }\n  }\n\n  //this will happen if the next button is clicked on a card\n  const handleNextButtonClick = async () => {\n    if (currentCardIndex < selectedDeck.cards.length - 1) {\n      setCurrentCardIndex(currentCardIndex + 1);\n      setIsFront(true);\n    } else {\n      const restartDeckConfirmed = window.confirm(\"Restart cards? Click 'cancel' to return to the homepage\");\n      if (restartDeckConfirmed) {\n        setCurrentCardIndex(0);\n        setIsFront(true);\n      } else {\n        history.push(\"/\");\n      }\n    }\n  };\n  const notEnoughCards = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Not enough cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Add Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n\n  /*\n  There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied, \n  and finally the text Study (e.g., Home/Rendering In React/Study).\n  */\n  const breadcrumb = /*#__PURE__*/_jsxDEV(\"nav\", {\n    children: /*#__PURE__*/_jsxDEV(\"ol\", {\n      className: \"breadcrumb\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"breadcrumb-item\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"breadcrumb-item\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/decks/${deckId}`,\n          children: selectedDeck.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"breadcrumb-item\",\n        children: \"Study\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: numCards <= 2 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [breadcrumb, notEnoughCards]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [breadcrumb, /*#__PURE__*/_jsxDEV(\"title\", {\n        children: selectedDeck.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 21\n      }, this), selectedDeck.cards.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [index + 1, \" of \", numCards]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: card.front\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Flip\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => handleNextButtonClick(index + 1),\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 29\n        }, this)]\n      }, card.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 25\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 9\n  }, this);\n};\n_s(Study, \"w4UMbHBlTUq5HnjO3llTYekr0IE=\", false, function () {\n  return [useParams, useHistory];\n});\n_c = Study;\nexport default Study;\nvar _c;\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"names":["React","useState","useEffect","readDeck","useParams","useHistory","Link","jsxDEV","_jsxDEV","Study","_s","deckId","selectedDeck","setSelectedDeck","loading","setLoading","isFront","setIsFront","numCards","setNumCards","currentCardIndex","setCurrentCardIndex","history","fetchData","abortController","AbortController","data","signal","cards","length","error","console","abort","flipCard","handleNextButtonClick","restartDeckConfirmed","window","confirm","push","notEnoughCards","children","fileName","_jsxFileName","lineNumber","columnNumber","breadcrumb","className","to","name","title","map","card","index","front","onClick","id","_c","$RefreshReg$"],"sources":["/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Study.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { readDeck } from \"../utils/api\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\n\n const Study = () => {\n    const { deckId } = useParams();\n    const [ selectedDeck, setSelectedDeck ]  = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [ isFront, setIsFront ] = useState(true);\n    //note: useState initializes a state variable named numCards with an initial value of 0 and setNumCards is a setter function used to update the value of numCards\n    const [ numCards, setNumCards ]  = useState(0); \n    const [ currentCardIndex, setCurrentCardIndex ] = useState(0);\n    const history = useHistory();\n\n    //First fetch the data and load the deck\n    useEffect(() => {\n        async function fetchData() {\n            const abortController = new AbortController();\n            try {\n                //You must use the readDeck() function from src/utils/api/index.js to load the deck that is being studied.\n                const data = await readDeck(deckId, abortController.signal);\n                //note: since numCards is a state variable, we can use it anywhere outside of useEffect\n                const numCards = data.cards.length; //getting the number of cards and setting it to variable\n                setSelectedDeck(data); //set the data to the state\n            } catch(error) {\n                console.error(\"error\", error);\n            }\n            finally {\n                setLoading(false);\n                abortController.abort();\n            };\n        }\n        fetchData();\n        //note: deckId is dependency array and means that the effect (fetchData) function will only run when the value of deckId changes\n        //note: if deckId remains the same between renders, the effect will not be re-executed\n    }, [deckId]);\n\n   \n\n    /*\n        \n    */\n    function flipCard(){\n        if(isFront){\n            setIsFront(false);\n        }\n        else {\n            setIsFront(true);\n        }\n    }\n\n     //this will happen if the next button is clicked on a card\n    const handleNextButtonClick = async() => {\n        if(currentCardIndex < selectedDeck.cards.length - 1){\n            setCurrentCardIndex(currentCardIndex + 1);\n            setIsFront(true)\n        } else {\n            const restartDeckConfirmed = window.confirm(\"Restart cards? Click 'cancel' to return to the homepage\");\n            if (restartDeckConfirmed){\n                setCurrentCardIndex(0);\n                setIsFront(true);\n            }\n            else {\n                history.push(\"/\");\n            }\n        }\n    }\n\n    const notEnoughCards = (\n        <div>\n            <p>Not enough cards</p>\n            <button>Add Cards</button>\n        </div>\n    )\n\n     /*\n    There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied, \n    and finally the text Study (e.g., Home/Rendering In React/Study).\n    */\n    const breadcrumb = (\n        <nav>\n            <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                    <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                    <Link to={`/decks/${deckId}`}>{selectedDeck.name}</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                    Study\n                </li>\n            </ol>\n        </nav>\n    )\n    \n    if(loading) {\n        return <p>Loading...</p>\n    }\n    return (\n        <div>\n            { numCards <= 2 ? (\n                <div>\n                    {breadcrumb}\n                    {notEnoughCards}\n                </div>\n            ) : (\n                <div>  \n                    {breadcrumb}\n                    <title>{selectedDeck.title}</title>\n                    { selectedDeck.cards.map((card, index) => (\n                        <div key = {card.id}>\n                            <h4>{index+1} of {numCards}</h4>\n                            <p>{card.front}</p>\n                            <button>Flip</button>\n                            <button onClick={()=> handleNextButtonClick(index+1)}>Next</button>\n                        </div>\n                    ))}\n                </div>\n            )}\n        </div>\n            );\n }\n\n\n export default Study;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Study.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { readDeck } from \"../utils/api\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Study = () => {\n  _s();\n  const {\n    deckId\n  } = useParams();\n  const [selectedDeck, setSelectedDeck] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [isFront, setIsFront] = useState(true);\n  //note: useState initializes a state variable named numCards with an initial value of 0 and setNumCards is a setter function used to update the value of numCards\n  const [numCards, setNumCards] = useState(0);\n  const history = useHistory();\n\n  //First fetch the data and load the deck\n  useEffect(() => {\n    async function fetchData() {\n      const abortController = new AbortController();\n      try {\n        //You must use the readDeck() function from src/utils/api/index.js to load the deck that is being studied.\n        const data = await readDeck(deckId, abortController.signal);\n        console.log('data.cards', data.cards);\n        //note: since numCards is a state variable, we can use it anywhere outside of useEffect\n        const numCards = data.cards.length; //getting the number of cards and setting it to variable\n        setNumCards(numCards); //setting the state of the number of cards with numCards above\n        console.log('numcards', numCards);\n        setSelectedDeck(data); //set the data to the state\n      } catch (error) {\n        console.error(\"error\", error);\n      }\n      return () => {\n        abortController.abort();\n      };\n    }\n    fetchData();\n    //note: deckId is dependency array and means that the effect (fetchData) function will only run when the value of deckId changes\n    //note: if deckId remains the same between renders, the effect will not be re-executed\n  }, [deckId]);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 16\n    }, this);\n  }\n\n  /*\n      \n  */\n  function flipCard() {\n    if (isFront) {\n      setIsFront(false);\n    } else {\n      setIsFront(true);\n    }\n  }\n\n  //this will happen if the next button is clicked on a card\n  function nextCard(index) {\n    const restartDeckConfirmed = window.confirm(\"Restart cards? Click 'cancel' to return to the homepage\");\n    if (index < numCards) {\n      setNumCards(numCards + 1);\n      setIsFront(true);\n    } else {\n      if (restartDeckConfirmed) {\n        setNumCards(1);\n        setIsFront(true);\n      } else {\n        history.push(\"/\");\n      }\n    }\n  }\n  const notEnoughCards = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Not enough cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Add Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 9\n  }, this);\n\n  /*\n  There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied, \n  and finally the text Study (e.g., Home/Rendering In React/Study).\n  */\n  const breadcrumb = /*#__PURE__*/_jsxDEV(\"nav\", {\n    children: /*#__PURE__*/_jsxDEV(\"ol\", {\n      className: \"breadcrumb\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"breadcrumb-item\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"breadcrumb-item\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/decks/${deckId}`,\n          children: selectedDeck.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"breadcrumb-item\",\n        children: \"Study\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 9\n  }, this);\n  if (numCards && numCards <= 2) {\n    console.log('number of cards (cards.length)', numCards);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [breadcrumb, notEnoughCards]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: breadcrumb\n    }, void 0, false);\n  }\n};\n_s(Study, \"aGLMHOhhyuUUI2EInQHzyFFFIbg=\", false, function () {\n  return [useParams, useHistory];\n});\n_c = Study;\nexport default Study;\nvar _c;\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"names":["React","useState","useEffect","readDeck","useParams","useHistory","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","Study","_s","deckId","selectedDeck","setSelectedDeck","loading","setLoading","isFront","setIsFront","numCards","setNumCards","history","fetchData","abortController","AbortController","data","signal","console","log","cards","length","error","abort","children","fileName","_jsxFileName","lineNumber","columnNumber","flipCard","nextCard","index","restartDeckConfirmed","window","confirm","push","notEnoughCards","breadcrumb","className","to","name","_c","$RefreshReg$"],"sources":["/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Study.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { readDeck } from \"../utils/api\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\n\n const Study = () => {\n    const { deckId } = useParams();\n    const [ selectedDeck, setSelectedDeck ]  = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [ isFront, setIsFront ] = useState(true);\n    //note: useState initializes a state variable named numCards with an initial value of 0 and setNumCards is a setter function used to update the value of numCards\n    const [ numCards, setNumCards ]  = useState(0); \n    const history = useHistory();\n\n    //First fetch the data and load the deck\n    useEffect(() => {\n        async function fetchData() {\n            const abortController = new AbortController();\n            try {\n                //You must use the readDeck() function from src/utils/api/index.js to load the deck that is being studied.\n                const data = await readDeck(deckId, abortController.signal);\n                console.log('data.cards', data.cards);\n                //note: since numCards is a state variable, we can use it anywhere outside of useEffect\n                const numCards = data.cards.length; //getting the number of cards and setting it to variable\n                setNumCards(numCards); //setting the state of the number of cards with numCards above\n                console.log('numcards', numCards);\n              \n                setSelectedDeck(data); //set the data to the state\n            } catch(error) {\n                console.error(\"error\", error);\n            }\n            return () => {\n                abortController.abort();\n            };\n        }\n        fetchData();\n        //note: deckId is dependency array and means that the effect (fetchData) function will only run when the value of deckId changes\n        //note: if deckId remains the same between renders, the effect will not be re-executed\n    }, [deckId]);\n\n    if(loading) {\n        return <p>Loading...</p>\n    }\n\n    /*\n        \n    */\n    function flipCard(){\n        if(isFront){\n            setIsFront(false);\n        }\n        else {\n            setIsFront(true);\n        }\n    }\n\n     //this will happen if the next button is clicked on a card\n    function nextCard(index){\n        const restartDeckConfirmed = window.confirm(\"Restart cards? Click 'cancel' to return to the homepage\");\n        if(index < numCards){\n            setNumCards(numCards+1);\n            setIsFront(true);\n        } else {\n            if(restartDeckConfirmed){\n                setNumCards(1);\n                setIsFront(true);\n            }\n            else {\n                history.push(\"/\");\n            }\n        }\n    }\n    \n    const notEnoughCards = (\n        <div>\n            <p>Not enough cards</p>\n            <button>Add Cards</button>\n        </div>\n    )\n\n     /*\n    There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied, \n    and finally the text Study (e.g., Home/Rendering In React/Study).\n    */\n    const breadcrumb = (\n        <nav>\n            <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                    <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                    <Link to={`/decks/${deckId}`}>{selectedDeck.name}</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                    Study\n                </li>\n            </ol>\n        </nav>\n    )\n    \n    if(numCards && numCards <= 2){\n        console.log('number of cards (cards.length)', numCards);\n        return (\n            <>\n                {breadcrumb}\n                {notEnoughCards}\n            </>\n        )\n    }\n    else{\n        return (\n            <>\n            {/*The deck title (i.e., \"Study: Rendering in React\" ) is shown on the screen.*/}\n            {breadcrumb}\n            {/* <title>${selectedDeck.title}</title>\n                <p>You got to the study page</p>\n                { selectedDeck.cards.map((card, index) => (\n                    <div key={card.id}>\n                        <h4>{index + 1} of {numCards}</h4>\n                        <p>{card.front}</p>\n                        <button>Flip</button>\n                        <button>Next</button>\n                    </div>\n                ))} */}\n            </>\n        )\n    }\n }\n\n\n export default Study;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
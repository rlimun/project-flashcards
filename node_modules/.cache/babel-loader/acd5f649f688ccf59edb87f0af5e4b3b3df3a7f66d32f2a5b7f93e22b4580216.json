{"ast":null,"code":"var _jsxFileName = \"/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { deleteDeck, listDecks } from \"../utils/api\";\nimport { Study } from \"./Study\";\nimport { Deck } from \"./Deck\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [decks, setDecks] = useState([]);\n  useEffect(() => {\n    // Fetch and update decks when the component mounts\n    const fetchData = async () => {\n      const data = await listDecks();\n      setDecks(data || []);\n    };\n    fetchData();\n  }, []);\n  /** \n  * Delete Deck prompt\n  * When the user clicks the Delete button, a warning message is shown and the user can click OK or Cancel. If the user clicks OK, the deck is deleted and the deleted deck is no longer visible on the Home screen.\n  * \n  * You can use window.confirm() to create the modal dialog shown in the screenshot below\n  **/\n  const handleDelete = deckId => {\n    const confirmed = window.confirm('Delete this deck? You will not be able to recover it');\n    if (confirmed) {\n      deleteDeck(deckId);\n      setDecks(decks.filter(deck => deck.id !== deckId));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/decks/new\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Create Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Link, {\n      to: `/decks/${deck.id}/study`,\n      children: \"Study\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Study, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Deck, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      name: \"delete\",\n      onClick: handleDelete,\n      children: \"Delete\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true)\n  //\n  ;\n};\n_s(Home, \"f+alwG6Mds7XNzaPIkXWhs/xDB4=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Link","deleteDeck","listDecks","Study","Deck","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","decks","setDecks","fetchData","data","handleDelete","deckId","confirmed","window","confirm","filter","deck","id","children","to","fileName","_jsxFileName","lineNumber","columnNumber","name","onClick","_c","$RefreshReg$"],"sources":["/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Home.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { deleteDeck, listDecks } from \"../utils/api\";\nimport { Study } from \"./Study\";\nimport { Deck } from \"./Deck\";\n\n\nconst Home = () => {\n\n    const [decks, setDecks] = useState([]);\n\n    useEffect(() => {\n        // Fetch and update decks when the component mounts\n        const fetchData = async () => {\n            const data = await listDecks();\n            setDecks(data || []);\n        };\n    \n        fetchData();\n    }, []);\n/** \n* Delete Deck prompt\n* When the user clicks the Delete button, a warning message is shown and the user can click OK or Cancel. If the user clicks OK, the deck is deleted and the deleted deck is no longer visible on the Home screen.\n* \n* You can use window.confirm() to create the modal dialog shown in the screenshot below\n**/\nconst handleDelete = (deckId) => {\n    const confirmed = window.confirm('Delete this deck? You will not be able to recover it');\n    if (confirmed) {\n        deleteDeck(deckId);\n        setDecks(decks.filter((deck) => deck.id !== deckId));\n    }\n}\n\n  return (\n    <>\n        {/* A Create Deck button is shown, and clicking it brings the user to the Create Deck screen. */}\n        <Link to=\"/decks/new\">\n            <button>Create Deck</button>\n        </Link>\n        {/*Existing decks are each shown with the deck name, the number of cards, and a Study, View, and Delete button.*/}\n        <Link to={`/decks/${deck.id}/study`}>Study</Link>\n        {/* Clicking the Study button brings the user to the Study screen. */}\n        <Study />\n\n        {/*Clicking the View button brings the user to the Deck screen.*/}\n        <Deck />\n\n        {/*Clicking the Delete button shows a warning message before deleting the deck.*/}\n        <button name=\"delete\" onClick={handleDelete}>\n            Delete\n          </button>\n    </>\n    //\n  );\n}\n\n\nexport default Home;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,UAAU,EAAEC,SAAS,QAAQ,cAAc;AACpD,SAASC,KAAK,QAAQ,SAAS;AAC/B,SAASC,IAAI,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAG9B,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEf,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMc,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,MAAMC,IAAI,GAAG,MAAMZ,SAAS,CAAC,CAAC;MAC9BU,QAAQ,CAACE,IAAI,IAAI,EAAE,CAAC;IACxB,CAAC;IAEDD,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EACV;AACA;AACA;AACA;AACA;AACA;EACA,MAAME,YAAY,GAAIC,MAAM,IAAK;IAC7B,MAAMC,SAAS,GAAGC,MAAM,CAACC,OAAO,CAAC,sDAAsD,CAAC;IACxF,IAAIF,SAAS,EAAE;MACXhB,UAAU,CAACe,MAAM,CAAC;MAClBJ,QAAQ,CAACD,KAAK,CAACS,MAAM,CAAEC,IAAI,IAAKA,IAAI,CAACC,EAAE,KAAKN,MAAM,CAAC,CAAC;IACxD;EACJ,CAAC;EAEC,oBACEV,OAAA,CAAAE,SAAA;IAAAe,QAAA,gBAEIjB,OAAA,CAACN,IAAI;MAACwB,EAAE,EAAC,YAAY;MAAAD,QAAA,eACjBjB,OAAA;QAAAiB,QAAA,EAAQ;MAAW;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,eAEPtB,OAAA,CAACN,IAAI;MAACwB,EAAE,EAAG,UAASH,IAAI,CAACC,EAAG,QAAQ;MAAAC,QAAA,EAAC;IAAK;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eAEjDtB,OAAA,CAACH,KAAK;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGTtB,OAAA,CAACF,IAAI;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAGRtB,OAAA;MAAQuB,IAAI,EAAC,QAAQ;MAACC,OAAO,EAAEf,YAAa;MAAAQ,QAAA,EAAC;IAE3C;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA,eACb;EACF;EAAA;AAEJ,CAAC;AAAAlB,EAAA,CAhDKD,IAAI;AAAAsB,EAAA,GAAJtB,IAAI;AAmDV,eAAeA,IAAI;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
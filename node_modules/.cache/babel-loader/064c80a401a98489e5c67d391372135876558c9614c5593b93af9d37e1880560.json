{"ast":null,"code":"var _jsxFileName = \"/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Study.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { readDeck } from \"../utils/api\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Study = () => {\n  _s();\n  const {\n    deckId\n  } = useParams();\n  const [deck, setDecks] = useState([]);\n  const [cards, setCards] = useState([]);\n  const [isFront, setIsFront] = useState(true);\n  //useState initializes a state variable named numCards with an initial value of 0 and setNumCards is a setter function used to update the value of numCards\n  const [numCards, setNumCards] = useState(0);\n  const history = useHistory();\n\n  //First fetch the data and load the deck\n  useEffect(() => {\n    async function fetchData() {\n      const abortController = new AbortController();\n      try {\n        //You must use the readDeck() function from src/utils/api/index.js to load the deck that is being studied.\n        const data = await readDeck(deckId, abortController.signal);\n        const numCards = data.cards.length; //getting the number of cards and setting it to variable\n        setNumCards(numCards); //setting the state of the number of cards with numCards above\n        setDecks(data); //set the data to the state\n      } catch (error) {\n        console.error(\"error\", error);\n      }\n      return () => {\n        abortController.abort();\n      };\n    }\n    fetchData();\n  }, []);\n\n  /*\n      \n  */\n  function flipCard() {\n    if (isFront) {\n      setIsFront(false);\n    } else {\n      setIsFront(true);\n    }\n  }\n\n  //this will happen if the next button is clicked on a card\n  function nextCard(index) {\n    const restartDeckConfirmed = window.confirm(\"Restart cards? Click 'cancel' to return to the homepage\");\n    if (index < numCards) {\n      setNumCards(numCards + 1);\n      setIsFront(true);\n    } else {\n      if (restartDeckConfirmed) {\n        setNumCards(1);\n        setIsFront(true);\n      } else {\n        history.push(\"/\");\n      }\n    }\n  }\n  const notEnoughCards = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Not enough cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Add Cards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 9\n  }, this);\n\n  /*\n  There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied, \n  and finally the text Study (e.g., Home/Rendering In React/Study).\n  */\n  const breadcrumb = /*#__PURE__*/_jsxDEV(\"nav\", {\n    children: /*#__PURE__*/_jsxDEV(\"ol\", {\n      className: \"breadcrumb\",\n      children: [/*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"breadcrumb-item\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: \"/\",\n          children: \"Home\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"breadcrumb-item\",\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          to: `/decks/${deck.id}`,\n          children: deck.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"breadcrumb-item\",\n        children: \"Study\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n  if (numCards <= 2) {\n    console.log('number of cards (cards.length)', numCards);\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [breadcrumb, notEnoughCards]\n    }, void 0, true);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [breadcrumb, /*#__PURE__*/_jsxDEV(\"title\", {\n        children: [\"$\", deck.title]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"You got to the study page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }, this), cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [card.id, \" of \", cards.length]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: card.front\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Flip\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Next\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 25\n        }, this)]\n      }, card.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this))]\n    }, void 0, true);\n  }\n};\n_s(Study, \"CJ6+Kyvt1+5nrQ5SA55je6i5aLo=\", false, function () {\n  return [useParams, useHistory];\n});\n_c = Study;\nexport default Study;\nvar _c;\n$RefreshReg$(_c, \"Study\");","map":{"version":3,"names":["React","useState","useEffect","readDeck","useParams","useHistory","Link","jsxDEV","_jsxDEV","Fragment","_Fragment","Study","_s","deckId","deck","setDecks","cards","setCards","isFront","setIsFront","numCards","setNumCards","history","fetchData","abortController","AbortController","data","signal","length","error","console","abort","flipCard","nextCard","index","restartDeckConfirmed","window","confirm","push","notEnoughCards","children","fileName","_jsxFileName","lineNumber","columnNumber","breadcrumb","className","to","id","name","log","title","map","card","front","_c","$RefreshReg$"],"sources":["/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Study.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { readDeck } from \"../utils/api\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\n\n const Study = () => {\n    const { deckId } = useParams();\n    const [ deck, setDecks ]  = useState([]);\n    const [ cards, setCards ] = useState([]);\n    const [ isFront, setIsFront ] = useState(true);\n    //useState initializes a state variable named numCards with an initial value of 0 and setNumCards is a setter function used to update the value of numCards\n    const [ numCards, setNumCards ]  = useState(0); \n    const history = useHistory();\n\n    //First fetch the data and load the deck\n    useEffect(() => {\n        async function fetchData() {\n            const abortController = new AbortController();\n            try {\n                //You must use the readDeck() function from src/utils/api/index.js to load the deck that is being studied.\n                const data = await readDeck(deckId, abortController.signal);\n                const numCards = data.cards.length; //getting the number of cards and setting it to variable\n                setNumCards(numCards); //setting the state of the number of cards with numCards above\n                setDecks(data); //set the data to the state\n            } catch(error) {\n                console.error(\"error\", error);\n            }\n            return () => {\n                abortController.abort();\n            };\n        }\n        fetchData();\n    }, []);\n\n    /*\n        \n    */\n    function flipCard(){\n        if(isFront){\n            setIsFront(false);\n        }\n        else {\n            setIsFront(true);\n        }\n    }\n\n     //this will happen if the next button is clicked on a card\n    function nextCard(index){\n        const restartDeckConfirmed = window.confirm(\"Restart cards? Click 'cancel' to return to the homepage\");\n        if(index < numCards){\n            setNumCards(numCards+1);\n            setIsFront(true);\n        } else {\n            if(restartDeckConfirmed){\n                setNumCards(1);\n                setIsFront(true);\n            }\n            else {\n                history.push(\"/\");\n            }\n        }\n    }\n    \n    const notEnoughCards = (\n        <div>\n            <p>Not enough cards</p>\n            <button>Add Cards</button>\n        </div>\n    )\n\n     /*\n    There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied, \n    and finally the text Study (e.g., Home/Rendering In React/Study).\n    */\n    const breadcrumb = (\n        <nav>\n            <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                    <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                    <Link to={`/decks/${deck.id}`}>{deck.name}</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                    Study\n                </li>\n            </ol>\n        </nav>\n    )\n    \n    if(numCards <= 2){\n        console.log('number of cards (cards.length)', numCards);\n        return (\n            <>\n                {breadcrumb}\n                {notEnoughCards}\n            </>\n        )\n    }\n    else{\n        return (\n            <>\n            {/*The deck title (i.e., \"Study: Rendering in React\" ) is shown on the screen.*/}\n            {breadcrumb}\n            <title>${deck.title}</title>\n                <p>You got to the study page</p>\n                { cards.map((card) => (\n                    <div key={card.id}>\n                        <h4>{card.id} of {cards.length}</h4>\n                        <p>{card.front}</p>\n                        <button>Flip</button>\n                        <button>Next</button>\n                    </div>\n                ))}\n            </>\n        )\n    }\n }\n\n\n export default Study;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
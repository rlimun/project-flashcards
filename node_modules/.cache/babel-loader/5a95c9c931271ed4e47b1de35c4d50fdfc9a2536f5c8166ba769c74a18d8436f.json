{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{readDeck}from\"../utils/api\";import{useParams,useHistory,Link}from\"react-router-dom\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const Study=()=>{const{deckId}=useParams();const{deck,setDeck}=useState([]);const{cards,setCard}=useState([]);const{isFront,setIsFront}=useState(true);const{cardNumber,setCardNumber}=useState(1);const history=useHistory();//First fetch the data and load the deck\nuseEffect(()=>{async function fetchData(){const abortController=new AbortController();try{//You must use the readDeck() function from src/utils/api/index.js to load the deck that is being studied.\nconst data=await readDeck(deckId,abortController.signal);setDeck(data);}catch(error){console.error(\"error\",error);}return()=>{abortController.abort();};}fetchData();},[]);/*\n        \n    */function flipCard(){if(isFront){setIsFront(false);}else{setIsFront(true);}}//this will happen if the next button is clicked on a card\nfunction nextCard(index){const restartDeckConfirmed=window.confirm(\"Restart cards? Click 'cancel' to return to the homepage\");if(index<cards.length){setCardNumber(cardNumber+1);setIsFront(true);}else{if(restartDeckConfirmed){setCardNumber(1);setIsFront(true);}else{history.push(\"/\");}}}const notEnoughCards=/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(\"p\",{children:\"Not enough cards\"}),/*#__PURE__*/_jsx(\"button\",{children:\"Add Cards\"})]});/*\n    There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied, \n    and finally the text Study (e.g., Home/Rendering In React/Study).\n    */const breadcrumb=/*#__PURE__*/_jsx(\"nav\",{children:/*#__PURE__*/_jsxs(\"ol\",{className:\"breadcrumb\",children:[/*#__PURE__*/_jsx(\"li\",{className:\"breadcrumb-item\",children:/*#__PURE__*/_jsx(Link,{to:\"/\",children:\"Home\"})}),/*#__PURE__*/_jsx(\"li\",{className:\"breadcrumb-item\",children:/*#__PURE__*/_jsx(Link,{to:\"/decks/\".concat(deck.id),children:deck.name})}),/*#__PURE__*/_jsx(\"li\",{className:\"breadcrumb-item\",children:\"Study\"})]})});if(cards.length<=2){return/*#__PURE__*/_jsxs(_Fragment,{children:[breadcrumb,notEnoughCards]});}else{return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(\"title\",{children:[\"$\",deck.title]}),/*#__PURE__*/_jsx(\"p\",{children:\"You got to the study page\"}),cards.map(card=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h4\",{children:[card.id,\" of \",cards.length]}),/*#__PURE__*/_jsx(\"p\",{children:card.front}),/*#__PURE__*/_jsx(\"button\",{children:\"Flip\"}),/*#__PURE__*/_jsx(\"button\",{children:\"Next\"})]},card.id))]});}};export default Study;","map":{"version":3,"names":["React","useState","useEffect","readDeck","useParams","useHistory","Link","jsx","_jsx","Fragment","_Fragment","jsxs","_jsxs","Study","deckId","deck","setDeck","cards","setCard","isFront","setIsFront","cardNumber","setCardNumber","history","fetchData","abortController","AbortController","data","signal","error","console","abort","flipCard","nextCard","index","restartDeckConfirmed","window","confirm","length","push","notEnoughCards","children","breadcrumb","className","to","concat","id","name","title","map","card","front"],"sources":["/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Study.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { readDeck } from \"../utils/api\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\n\nconst Study = () => {\n    const { deckId } = useParams();\n    const { deck, setDeck } = useState([]);\n    const { cards, setCard } = useState([]);\n    const { isFront, setIsFront} = useState(true);\n    const { cardNumber, setCardNumber } = useState(1);\n    const history = useHistory();\n\n    //First fetch the data and load the deck\n    useEffect(() => {\n        async function fetchData() {\n            const abortController = new AbortController();\n            try {\n                //You must use the readDeck() function from src/utils/api/index.js to load the deck that is being studied.\n                const data = await readDeck(deckId, abortController.signal);\n                setDeck(data);\n            } catch(error) {\n                console.error(\"error\", error);\n            }\n            return () => {\n                abortController.abort();\n            };\n        }\n        fetchData();\n    }, []);\n\n    /*\n        \n    */\n    function flipCard(){\n        if(isFront){\n            setIsFront(false);\n        }\n        else {\n            setIsFront(true);\n        }\n    }\n\n     //this will happen if the next button is clicked on a card\n    function nextCard(index){\n        const restartDeckConfirmed = window.confirm(\"Restart cards? Click 'cancel' to return to the homepage\");\n        if(index < cards.length){\n            setCardNumber(cardNumber+1);\n            setIsFront(true);\n        } else {\n            if(restartDeckConfirmed){\n                setCardNumber(1);\n                setIsFront(true);\n            }\n            else {\n                history.push(\"/\");\n            }\n        }\n    }\n    \n    const notEnoughCards = (\n        <>\n            <p>Not enough cards</p>\n            <button>Add Cards</button>\n        </>\n\n    )\n\n     /*\n    There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied, \n    and finally the text Study (e.g., Home/Rendering In React/Study).\n    */\n    const breadcrumb = (\n        <nav>\n            <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                    <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                    <Link to={`/decks/${deck.id}`}>{deck.name}</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                    Study\n                </li>\n            </ol>\n        </nav>\n    )\n    \n    if(cards.length <= 2){\n        return (\n            <>\n            {breadcrumb}\n            {notEnoughCards}\n            </>\n        )\n    }\n    else{\n        return (\n            <>\n            {/*The deck title (i.e., \"Study: Rendering in React\" ) is shown on the screen.*/}\n            <title>${deck.title}</title>\n                <p>You got to the study page</p>\n                { cards.map((card) => (\n                    <div key={card.id}>\n                        <h4>{card.id} of {cards.length}</h4>\n                        <p>{card.front}</p>\n                        <button>Flip</button>\n                        <button>Next</button>\n                    </div>\n                ))}\n            </>\n        )\n    }\n}\n\nexport default Study;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import React,{useEffect}from\"react\";import{useHistory,useParams}from\"react-router-dom\";import{deleteCard,readDeck}from\"../utils/api\";/**\n * Component to display a list of cards for a specific deck\n * @param {Object} props.deck - The deck object containing the cards to be displayed\n * @param {function} props.setDeck - Function to update the deck state\n * @returns {JSX.Element} React component\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function CardsList(_ref){let{deck,setDeck}=_ref;const history=useHistory();const{deckId}=useParams();// fetches the deck and updates the state\nuseEffect(()=>{const abortController=new AbortController();const fetchDeck=async()=>{try{const deck=await readDeck(deckId,abortController.signal);console.log('data',deck);setDeck(deck);}catch(error){console.log('Error fetching decks',error);}};fetchDeck();return()=>{abortController.abort();};},[deckId,setDeck]);/**\n     * Redirects to the edit page of that card\n     * @param {string} cardId - the Id of the card to edit\n     */const handleCardEditButton=async cardId=>{history.push(\"/decks/:deckId/cards/\".concat(cardId,\"/edit\"));};/**\n     * Deletes the card and updates the deck\n     * @param {string} cardId - the ID of the card to delete\n     */const handleCardDeleteButton=async cardId=>{const confirmed=window.confirm('Delete this card? You will not be able to recover it');const abortController=new AbortController();if(confirmed){try{await deleteCard(cardId,abortController.signal);const updatedDeck=await readDeck(deck.id,abortController.signal);setDeck(updatedDeck);}catch(error){console.error(\"Error deleting card\",error);}}};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Cards\"}),deck.cards.map(card=>/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"p\",{children:[\"Question: \",card.front]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Answer: \",card.back]}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleCardEditButton(card.id),children:\"Edit\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleCardDeleteButton(card.id),children:\"Delete\"})]},card.id))]});}export default CardsList;","map":{"version":3,"names":["React","useEffect","useHistory","useParams","deleteCard","readDeck","jsx","_jsx","jsxs","_jsxs","CardsList","_ref","deck","setDeck","history","deckId","abortController","AbortController","fetchDeck","signal","console","log","error","abort","handleCardEditButton","cardId","push","concat","handleCardDeleteButton","confirmed","window","confirm","updatedDeck","id","children","cards","map","card","front","back","onClick"],"sources":["/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/CardsList.js"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { deleteCard, readDeck } from \"../utils/api\";\n\n/**\n * Component to display a list of cards for a specific deck\n * @param {Object} props.deck - The deck object containing the cards to be displayed\n * @param {function} props.setDeck - Function to update the deck state\n * @returns {JSX.Element} React component\n */\nfunction CardsList({ deck, setDeck }) {\n    const history = useHistory();\n    const { deckId } = useParams();\n\n    // fetches the deck and updates the state\n    useEffect(() => {\n        const abortController = new AbortController();\n        const fetchDeck = async() => {\n            try {\n                const deck = await readDeck(deckId, abortController.signal);\n                console.log('data', deck);\n                setDeck(deck);\n            }\n            catch(error){\n                console.log('Error fetching decks', error);\n            }\n        }\n        fetchDeck();\n        return () => {\n            abortController.abort();\n        }\n    }, [deckId, setDeck]);\n\n    /**\n     * Redirects to the edit page of that card\n     * @param {string} cardId - the Id of the card to edit\n     */\n    const handleCardEditButton = async(cardId) => {\n        history.push(`/decks/:deckId/cards/${cardId}/edit`)\n    }\n\n    /**\n     * Deletes the card and updates the deck\n     * @param {string} cardId - the ID of the card to delete\n     */\n    const handleCardDeleteButton = async(cardId) => {\n        const confirmed = window.confirm('Delete this card? You will not be able to recover it');\n        const abortController = new AbortController();\n        if (confirmed) {\n            try {\n                await deleteCard(cardId, abortController.signal);\n                const updatedDeck = await readDeck(deck.id, abortController.signal);\n                setDeck(updatedDeck);\n            } catch(error){\n                console.error(\"Error deleting card\", error);\n            }\n        }\n    }\n\n    return (\n        <div>\n            <h3>Cards</h3>\n            { deck.cards.map((card) => (\n                <div key={card.id}>\n                    <p>Question: {card.front}</p>\n                    <p>Answer: {card.back}</p>\n                    <button onClick={() => handleCardEditButton(card.id)}>Edit</button>\n                    <button onClick={() => handleCardDeleteButton(card.id)}>Delete</button>\n                </div>\n            ))}\n        </div>\n    )\n}\n\nexport default CardsList;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
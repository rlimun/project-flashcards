{"ast":null,"code":"var _jsxFileName = \"/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { deleteDeck, listDecks } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [decks, setDecks] = useState([]);\n  useEffect(() => {\n    // Fetch and update decks when the component mounts\n    const fetchData = async () => {\n      // This function inside uesEffect will be executed after the component has been rendered\n      const data = await listDecks(); // Call utility function listDecks() which makes an asynchronous request to API to get a list of decks; await keyword is used to wait for the promise to resolve\n      setDecks(data || []);\n    }; // if data is truthy (API call was successful and it returned data) then set the state to 'data', if it is falsy, set the state to empty array []\n\n    fetchData(); // Invoked when component mounts (ensures that the decks are fetched and the component state is updated with the latest data when the component is first rendered)\n  }, []); // [] is the dependency sarray and it is saying that the effect will only run once when the component mounts\n\n  /** \n  * Delete Deck prompt\n  * When the user clicks the Delete button, a warning message is shown and the user can click OK or Cancel. \n  * If the user clicks OK, the deck is deleted and the deleted deck is no longer visible on the Home screen.\n  **/\n  const handleDelete = deckId => {\n    const confirmed = window.confirm('Delete this deck? You will not be able to recover it');\n    if (confirmed) {\n      deleteDeck(deckId);\n      setDecks(decks.filter(deck => deck.id !== deckId));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/decks/new\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        children: \"Create Deck\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 9\n    }, this), decks.map(deck => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: `/decks/${deck.id}`,\n        children: [\"Deck \", deck.id]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/decks/${deck.id}/study`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Study\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: `/decks/${deck.id}`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"View\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        name: \"delete\",\n        onClick: () => handleDelete(deck.id),\n        children: \" Delete \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }, this)]\n    }, deck.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this))]\n  }, void 0, true);\n};\n_s(Home, \"f+alwG6Mds7XNzaPIkXWhs/xDB4=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Link","deleteDeck","listDecks","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","decks","setDecks","fetchData","data","handleDelete","deckId","confirmed","window","confirm","filter","deck","id","children","to","fileName","_jsxFileName","lineNumber","columnNumber","map","name","onClick","_c","$RefreshReg$"],"sources":["/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Home.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { deleteDeck, listDecks } from \"../utils/api\";\n\n\nconst Home = () => {\n\n    const [decks, setDecks] = useState([]);\n\n    useEffect(() => {\n        // Fetch and update decks when the component mounts\n        const fetchData = async () => { // This function inside uesEffect will be executed after the component has been rendered\n            const data = await listDecks(); // Call utility function listDecks() which makes an asynchronous request to API to get a list of decks; await keyword is used to wait for the promise to resolve\n            setDecks(data || []); \n        }; // if data is truthy (API call was successful and it returned data) then set the state to 'data', if it is falsy, set the state to empty array []\n    \n        fetchData(); // Invoked when component mounts (ensures that the decks are fetched and the component state is updated with the latest data when the component is first rendered)\n    }, []); // [] is the dependency sarray and it is saying that the effect will only run once when the component mounts\n\n    /** \n    * Delete Deck prompt\n    * When the user clicks the Delete button, a warning message is shown and the user can click OK or Cancel. \n    * If the user clicks OK, the deck is deleted and the deleted deck is no longer visible on the Home screen.\n    **/\n    const handleDelete = (deckId) => {\n        const confirmed = window.confirm('Delete this deck? You will not be able to recover it');\n        if (confirmed) {\n            deleteDeck(deckId);\n            setDecks(decks.filter((deck) => deck.id !== deckId));\n        }\n    }\n\n  return (\n    <>\n        {/* A Create Deck button is shown, and clicking it brings the user to the Create Deck screen. */}\n        <Link to=\"/decks/new\">\n            <button>Create Deck</button>\n        </Link>\n        {/*Existing decks are each shown with the deck name, the number of cards, and a Study, View, and Delete button.*/}\n        { decks.map((deck) => (\n            <div key={ deck.id }>\n              <Link to={`/decks/${deck.id}`}>Deck {deck.id}</Link>\n              {/* Clicking the Study button brings the user to the Study screen. */}\n              <Link to={`/decks/${deck.id}/study`}>\n                <button>Study</button>\n                </Link>\n              {/*Clicking the View button brings the user to the Deck screen.*/}\n              <Link to={`/decks/${deck.id}`}>\n                <button>View</button>\n                </Link>\n              {/*Clicking the Delete button shows a warning message before deleting the deck.*/}\n              <button name=\"delete\" onClick={() => handleDelete(deck.id)}> Delete </button>\n            </div>\n            ))\n        }\n    </>\n  );\n}\n\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
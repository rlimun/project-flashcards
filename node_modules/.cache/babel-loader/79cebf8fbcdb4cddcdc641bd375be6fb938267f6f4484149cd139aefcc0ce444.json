{"ast":null,"code":"/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */const API_BASE_URL=process.env.API_BASE_URL||\"http://localhost:8080\";/**\n * Defines the default headers for these functions to work with `json-server`\n */const headers=new Headers();headers.append(\"Content-Type\",\"application/json\");/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */function stripCards(deck){const{cards,...deckWithoutCards}=deck;return deckWithoutCards;}/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */async function fetchJson(url,options,onCancel){try{const response=await fetch(url,options);if(response.status<200||response.status>399){throw new Error(\"\".concat(response.status,\" - \").concat(response.statusText));}if(response.status===204){return null;}return await response.json();}catch(error){if(error.name!==\"AbortError\"){console.error(error.stack);throw error;}return Promise.resolve(onCancel);}}/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */export async function listDecks(signal){const url=\"\".concat(API_BASE_URL,\"/decks?_embed=cards\");return await fetchJson(url,{signal},[]);}/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */export async function createDeck(deck,signal){const url=\"\".concat(API_BASE_URL,\"/decks\");const options={method:\"POST\",headers,body:JSON.stringify(stripCards(deck)),signal};return await fetchJson(url,options,{});}/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */export async function readDeck(deckId,signal){const url=\"\".concat(API_BASE_URL,\"/decks/\").concat(deckId,\"?_embed=cards\");return await fetchJson(url,{signal},{});}/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */export async function updateDeck(updatedDeck,signal){const url=\"\".concat(API_BASE_URL,\"/decks/\").concat(updatedDeck.id,\"?_embed=cards\");const options={method:\"PUT\",headers,body:JSON.stringify(stripCards(updatedDeck)),signal};return await fetchJson(url,options,updatedDeck);}/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */export async function deleteDeck(deckId,signal){const url=\"\".concat(API_BASE_URL,\"/decks/\").concat(deckId);const options={method:\"DELETE\",signal};return await fetchJson(url,options);}/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */export async function createCard(deckId,card,signal){// There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n// and the card is not related to the deck because the data types of the ID's are different.\nconst url=\"\".concat(API_BASE_URL,\"/cards\");card.deckId=Number(deckId);const options={method:\"POST\",headers,body:JSON.stringify(card),signal};return await fetchJson(url,options,card);}/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */export async function readCard(cardId,signal){const url=\"\".concat(API_BASE_URL,\"/cards/\").concat(cardId);return await fetchJson(url,{signal},{});}/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */export async function updateCard(updatedCard,signal){const url=\"\".concat(API_BASE_URL,\"/cards/\").concat(updatedCard.id);const options={method:\"PUT\",headers,body:JSON.stringify(updatedCard)};return await fetchJson(url,options,updatedCard);}/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */export async function deleteCard(cardId,signal){const url=\"\".concat(API_BASE_URL,\"/cards/\").concat(cardId);const options={method:\"DELETE\",signal};return await fetchJson(url,options);}","map":{"version":3,"names":["API_BASE_URL","process","env","headers","Headers","append","stripCards","deck","cards","deckWithoutCards","fetchJson","url","options","onCancel","response","fetch","status","Error","concat","statusText","json","error","name","console","stack","Promise","resolve","listDecks","signal","createDeck","method","body","JSON","stringify","readDeck","deckId","updateDeck","updatedDeck","id","deleteDeck","createCard","card","Number","readCard","cardId","updateCard","updatedCard","deleteCard"],"sources":["/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/utils/api/index.js"],"sourcesContent":["/**\n * Defines the base URL for the API.\n * The default values is overridden by the `API_BASE_URL` environment variable.\n */\nconst API_BASE_URL = process.env.API_BASE_URL || \"http://localhost:8080\";\n\n/**\n * Defines the default headers for these functions to work with `json-server`\n */\nconst headers = new Headers();\nheaders.append(\"Content-Type\", \"application/json\");\n\n/**\n * Removes the `cards` property from the deck so it is not accidentally saved with the deck.\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param deck\n *  the deck instance\n * @returns {*}\n *  a copy of the deck instance with the `cards` property removed.\n */\nfunction stripCards(deck) {\n  const { cards, ...deckWithoutCards } = deck;\n  return deckWithoutCards;\n}\n\n/**\n * Fetch `json` from the specified URL and handle error status codes and ignore `AbortError`s\n *\n * This function is NOT exported because it is not needed outside of this file.\n *\n * @param url\n *  the url for the requst.\n * @param options\n *  any options for fetch\n * @param onCancel\n *  default value returned if the fetch is cancelled.\n * @returns {Promise<Error|any>}\n *  a promise that resolves to the `json` data or an error.\n *  If the response is not in the 200 - 399 range the promise is rejected.\n */\n\nasync function fetchJson(url, options, onCancel) {\n  try {\n    const response = await fetch(url, options);\n\n    if (response.status < 200 || response.status > 399) {\n      throw new Error(`${response.status} - ${response.statusText}`);\n    }\n\n    if (response.status === 204) {\n      return null;\n    }\n\n    return await response.json();\n\n  } catch (error) {\n    if (error.name !== \"AbortError\") {\n      console.error(error.stack);\n      throw error;\n    }\n    return Promise.resolve(onCancel);\n  }\n}\n\n/**\n * Retrieves all existing decks.\n * @returns {Promise<[deck]>}\n *  a promise that resolves to a possibly empty array of decks saved in the database.\n */\nexport async function listDecks(signal) {\n  const url = `${API_BASE_URL}/decks?_embed=cards`;\n  return await fetchJson(url, { signal }, []);\n}\n\n/**\n * Saves deck to the database (public/data/db.json).\n * There is no validation done on the deck object, any object will be saved.\n * @param deck\n *  the deck to save, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<deck>}\n *  a promise that resolves the saved deck, which will now have an `id` property.\n */\nexport async function createDeck(deck, signal) {\n  const url = `${API_BASE_URL}/decks`;\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(stripCards(deck)),\n    signal,\n  };\n  return await fetchJson(url, options, {});\n}\n\n/**\n * Retrieves the deck with the specified `deckId`\n * @param deckId\n *  the `id` property matching the desired deck.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<any>}\n *  a promise that resolves to the saved deck.\n */\nexport async function readDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}?_embed=cards`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedDeck\n *  the deck to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated deck.\n */\nexport async function updateDeck(updatedDeck, signal) {\n  const url = `${API_BASE_URL}/decks/${updatedDeck.id}?_embed=cards`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(stripCards(updatedDeck)),\n    signal,\n  };\n  return await fetchJson(url, options, updatedDeck);\n}\n\n/**\n * Deletes the deck with the specified `deckId`.\n * @param deckId\n *  the id of the deck to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteDeck(deckId, signal) {\n  const url = `${API_BASE_URL}/decks/${deckId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n\n/**\n * Creates a new card associated with the specified `deckId`.\n * There is no validation that there is an existing deck with the specified `deckId`.\n * @param deckId\n *  the id of the target deck\n * @param card\n *  the card to create, which must not have an `id` property\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the new card, which will have an `id` property.\n */\nexport async function createCard(deckId, card, signal) {\n  // There is a bug in json-server, if you post to /decks/:deckId/cards the associated deckId is a string\n  // and the card is not related to the deck because the data types of the ID's are different.\n  const url = `${API_BASE_URL}/cards`;\n  card.deckId = Number(deckId);\n  const options = {\n    method: \"POST\",\n    headers,\n    body: JSON.stringify(card),\n    signal,\n  };\n  return await fetchJson(url, options, card);\n}\n\n/**\n * Retrieves the card with the specified `cardId`\n * @param cardId\n *  the id of the target\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the saved card.\n */\nexport async function readCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  return await fetchJson(url, { signal }, {});\n}\n\n/**\n * Updates an existing deck\n * @param updatedCard\n *  the card to save, which must have an `id` property.\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to the updated card.\n */\nexport async function updateCard(updatedCard, signal) {\n  const url = `${API_BASE_URL}/cards/${updatedCard.id}`;\n  const options = {\n    method: \"PUT\",\n    headers,\n    body: JSON.stringify(updatedCard),\n  };\n  return await fetchJson(url, options, updatedCard);\n}\n\n/**\n * Deletes the card with the specified `cardId`.\n * @param cardId\n *  the id of the card to delete\n * @param signal\n *  optional AbortController.signal\n * @returns {Promise<Error|*>}\n *  a promise that resolves to an empty object.\n */\nexport async function deleteCard(cardId, signal) {\n  const url = `${API_BASE_URL}/cards/${cardId}`;\n  const options = { method: \"DELETE\", signal };\n  return await fetchJson(url, options);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
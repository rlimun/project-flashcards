{"ast":null,"code":"var _jsxFileName = \"/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Home.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Link, useHistory, Route, Switch } from \"react-router-dom\";\nimport { deleteDeck, listDecks } from \"../utils/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Home = () => {\n  _s();\n  const [decks, setDecks] = useState([]);\n  const history = useHistory();\n  useEffect(() => {\n    // Fetch and update decks when the component mounts\n    const fetchData = async () => {\n      // This function inside uesEffect will be executed after the component has been rendered\n      const data = await listDecks(); // Call utility function listDecks() which makes an asynchronous request to API to get a list of decks; await keyword is used to wait for the promise to resolve\n      setDecks(data || []);\n    }; // if data is truthy (API call was successful and it returned data) then set the state to 'data', if it is falsy, set the state to empty array []\n\n    fetchData(); // Invoked when component mounts (ensures that the decks are fetched and the component state is updated with the latest data when the component is first rendered)\n  }, []); // [] is the dependency sarray and it is saying that the effect will only run once when the component mounts\n\n  const handleStudyClick = deckId => {\n    history.push(`/decks/${deckId}/study`);\n  };\n  const handleCreateDeckClick = deckId => {\n    history.push(\"/decks/new\");\n  };\n  const handleViewClick = deckId => {\n    history.push(`/decks/${deckId}`);\n  };\n  /** \n  * Delete Deck prompt\n  * When the user clicks the Delete button, a warning message is shown and the user can click OK or Cancel. \n  * If the user clicks OK, the deck is deleted and the deleted deck is no longer visible on the Home screen.\n  **/\n  const handleDelete = deckId => {\n    const confirmed = window.confirm('Delete this deck? You will not be able to recover it');\n    if (confirmed) {\n      deleteDeck(deckId);\n      setDecks(decks.filter(deck => deck.id !== deckId));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(Switch, {\n      children: /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        children: [/*#__PURE__*/_jsxDEV(Home, {\n          handleCreateDeckClick: handleCreateDeckClick\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this), decks.map(deck => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(Link, {\n            to: `/decks/${deck.id}`,\n            children: [\"Deck \", deck.id]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Home, {\n            handleStudyClick: handleStudyClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Home, {\n            handleViewClick: handleViewClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            name: \"delete\",\n            onClick: () => handleDelete(deck.id),\n            children: \" Delete \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this)]\n        }, deck.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 21\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n_s(Home, \"G11efxXmh2SE3Q3tr6boo37MplY=\", false, function () {\n  return [useHistory];\n});\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["React","useState","useEffect","Link","useHistory","Route","Switch","deleteDeck","listDecks","jsxDEV","_jsxDEV","Fragment","_Fragment","Home","_s","decks","setDecks","history","fetchData","data","handleStudyClick","deckId","push","handleCreateDeckClick","handleViewClick","handleDelete","confirmed","window","confirm","filter","deck","id","children","exact","path","fileName","_jsxFileName","lineNumber","columnNumber","map","to","name","onClick","_c","$RefreshReg$"],"sources":["/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Home.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Link, useHistory, Route, Switch } from \"react-router-dom\";\nimport { deleteDeck, listDecks } from \"../utils/api\";\n\n\nconst Home = () => {\n\n    const [decks, setDecks] = useState([]);\n    const history = useHistory();\n\n    useEffect(() => {\n        // Fetch and update decks when the component mounts\n        const fetchData = async () => { // This function inside uesEffect will be executed after the component has been rendered\n            const data = await listDecks(); // Call utility function listDecks() which makes an asynchronous request to API to get a list of decks; await keyword is used to wait for the promise to resolve\n            setDecks(data || []); \n        }; // if data is truthy (API call was successful and it returned data) then set the state to 'data', if it is falsy, set the state to empty array []\n    \n        fetchData(); // Invoked when component mounts (ensures that the decks are fetched and the component state is updated with the latest data when the component is first rendered)\n    }, []); // [] is the dependency sarray and it is saying that the effect will only run once when the component mounts\n\n    const handleStudyClick = (deckId) => {\n        history.push(`/decks/${deckId}/study`);\n    }\n\n    const handleCreateDeckClick = (deckId) => {\n        history.push(\"/decks/new\");\n    }\n\n    const handleViewClick = (deckId) => {\n        history.push(`/decks/${deckId}`);\n    }\n    /** \n    * Delete Deck prompt\n    * When the user clicks the Delete button, a warning message is shown and the user can click OK or Cancel. \n    * If the user clicks OK, the deck is deleted and the deleted deck is no longer visible on the Home screen.\n    **/\n    const handleDelete = (deckId) => {\n        const confirmed = window.confirm('Delete this deck? You will not be able to recover it');\n        if (confirmed) {\n            deleteDeck(deckId);\n            setDecks(decks.filter((deck) => deck.id !== deckId));\n        }\n    }\n\n  return (\n    <>\n        <Switch>\n            <Route exact path=\"/\">\n                {/* A Create Deck button is shown, and clicking it brings the user to the Create Deck screen. */}\n                <Home handleCreateDeckClick={ handleCreateDeckClick }/>\n                { decks.map((deck) => (\n                    <div key={ deck.id }>\n                    <Link to={`/decks/${deck.id}`}>Deck {deck.id}</Link>\n              {/* Clicking the Study button brings the user to the Study screen. */}\n                <Home handleStudyClick={ handleStudyClick }/>\n              {/*Clicking the View button brings the user to the Deck screen.*/}\n              <Home handleViewClick={ handleViewClick }/>\n              {/*Clicking the Delete button shows a warning message before deleting the deck.*/}\n              <button name=\"delete\" onClick={() => handleDelete(deck.id)}> Delete </button>\n            </div>\n            ))}\n            </Route>\n        </Switch>\n    </>\n  );\n}\n\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{readDeck}from\"../utils/api\";import{useParams,useHistory,Link}from\"react-router-dom\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const Study=()=>{const{deckId}=useParams();const[selectedDeck,setSelectedDeck]=useState([]);const[loading,setLoading]=useState(true);const[isFront,setIsFront]=useState(true);//note: useState initializes a state variable named numCards with an initial value of 0 and setNumCards is a setter function used to update the value of numCards\nconst[numCards,setNumCards]=useState(0);const[currentCardIndex,setCurrentCardIndex]=useState(0);const history=useHistory();//First fetch the data and load the deck\nuseEffect(()=>{async function fetchData(){const abortController=new AbortController();try{//You must use the readDeck() function from src/utils/api/index.js to load the deck that is being studied.\nconst data=await readDeck(deckId,abortController.signal);const numCards=data.cards.length;//getting the number of cards and setting it to variable\nsetSelectedDeck(data);//set the data to the state\nsetNumCards(numCards);//set the number of cards\n}catch(error){console.error(\"error\",error);}finally{setLoading(false);// used to signal that data fetching process has completed\nabortController.abort();// an abort signal that cancels the request if component is unmounted before request is complete\n};}fetchData();//note: deckId is dependency array and means that the effect (fetchData) function will only run when the value of deckId changes\n//note: if deckId remains the same between renders, the effect will not be re-executed\n},[deckId]);/**\n     * Flip card function that sets front of the card to true or false\n     **/function flipCard(){if(isFront){setIsFront(false);}else{setIsFront(true);}}/**\n     * Handles the functionality of clicking on the next button\n     * It will go to the next card until it hits the last card\n     * Once you are at the last card, it will prompt you to restart cards or cancel\n     */const handleNextButtonClick=async()=>{if(currentCardIndex<selectedDeck.cards.length-1){setCurrentCardIndex(currentCardIndex+1);setIsFront(true);}else{const restartDeckConfirmed=window.confirm(\"Restart cards? Click 'cancel' to return to the homepage\");if(restartDeckConfirmed){setCurrentCardIndex(0);setIsFront(true);}else{history.push(\"/\");}}};/**\n     * Returns JSX of when you don't have enough cards\n     */const notEnoughCards=/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"p\",{children:\"Not enough cards\"}),/*#__PURE__*/_jsx(\"button\",{children:\"Add Cards\"})]});/**\n     * There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied, \n     * and finally the text Study (e.g., Home/Rendering In React/Study).\n     **/const breadcrumb=/*#__PURE__*/_jsx(\"nav\",{children:/*#__PURE__*/_jsxs(\"ol\",{className:\"breadcrumb\",children:[/*#__PURE__*/_jsx(\"li\",{className:\"breadcrumb-item\",children:/*#__PURE__*/_jsx(Link,{to:\"/\",children:\"Home\"})}),/*#__PURE__*/_jsx(\"li\",{className:\"breadcrumb-item\",children:/*#__PURE__*/_jsx(Link,{to:\"/decks/\".concat(deckId),children:selectedDeck.name})}),/*#__PURE__*/_jsx(\"li\",{className:\"breadcrumb-item\",children:\"Study\"})]})});// if data hasn't completed fetching, show Loading text\nif(loading){return/*#__PURE__*/_jsx(\"p\",{children:\"Loading...\"});}return/*#__PURE__*/_jsx(\"div\",{children:numCards<=2?/*#__PURE__*/_jsxs(\"div\",{children:[breadcrumb,notEnoughCards]}):/*#__PURE__*/_jsxs(\"div\",{children:[breadcrumb,/*#__PURE__*/_jsx(\"title\",{children:selectedDeck.title}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"h4\",{children:[currentCardIndex+1,\" of \",selectedDeck.cards.length]}),/*#__PURE__*/_jsx(\"p\",{children:isFront?selectedDeck.cards[currentCardIndex].front:selectedDeck.cards[currentCardIndex].back}),isFront&&/*#__PURE__*/_jsx(\"button\",{onClick:flipCard,children:\"Flip\"}),!isFront&&/*#__PURE__*/_jsx(\"button\",{onClick:handleNextButtonClick,children:\"Next\"})]})]})});};export default Study;","map":{"version":3,"names":["React","useState","useEffect","readDeck","useParams","useHistory","Link","jsx","_jsx","jsxs","_jsxs","Study","deckId","selectedDeck","setSelectedDeck","loading","setLoading","isFront","setIsFront","numCards","setNumCards","currentCardIndex","setCurrentCardIndex","history","fetchData","abortController","AbortController","data","signal","cards","length","error","console","abort","flipCard","handleNextButtonClick","restartDeckConfirmed","window","confirm","push","notEnoughCards","children","breadcrumb","className","to","concat","name","title","front","back","onClick"],"sources":["/Users/rlimun/SWE_Program/Front-End-Development/react-assessment/project-flashcards/src/Layout/Study.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { readDeck } from \"../utils/api\";\nimport { useParams, useHistory, Link } from \"react-router-dom\";\n\n const Study = () => {\n    const { deckId } = useParams();\n    const [ selectedDeck, setSelectedDeck ]  = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [ isFront, setIsFront ] = useState(true);\n    //note: useState initializes a state variable named numCards with an initial value of 0 and setNumCards is a setter function used to update the value of numCards\n    const [ numCards, setNumCards ]  = useState(0); \n    const [ currentCardIndex, setCurrentCardIndex ] = useState(0);\n    const history = useHistory();\n\n    //First fetch the data and load the deck\n    useEffect(() => {\n        async function fetchData() {\n            const abortController = new AbortController();\n            try {\n                //You must use the readDeck() function from src/utils/api/index.js to load the deck that is being studied.\n                const data = await readDeck(deckId, abortController.signal);\n                const numCards = data.cards.length; //getting the number of cards and setting it to variable\n                setSelectedDeck(data); //set the data to the state\n                setNumCards(numCards); //set the number of cards\n            } catch(error) {\n                console.error(\"error\", error);\n            }\n            finally {\n                setLoading(false); // used to signal that data fetching process has completed\n                abortController.abort(); // an abort signal that cancels the request if component is unmounted before request is complete\n            };\n        }\n        fetchData();\n        //note: deckId is dependency array and means that the effect (fetchData) function will only run when the value of deckId changes\n        //note: if deckId remains the same between renders, the effect will not be re-executed\n    }, [deckId]);\n\n\n    /**\n     * Flip card function that sets front of the card to true or false\n     **/\n    function flipCard(){\n        if(isFront){\n            setIsFront(false);\n        }\n        else {\n            setIsFront(true);\n        }\n    }\n\n    /**\n     * Handles the functionality of clicking on the next button\n     * It will go to the next card until it hits the last card\n     * Once you are at the last card, it will prompt you to restart cards or cancel\n     */\n    const handleNextButtonClick = async() => {\n        if(currentCardIndex < selectedDeck.cards.length - 1){\n            setCurrentCardIndex(currentCardIndex + 1);\n            setIsFront(true)\n        } else {\n            const restartDeckConfirmed = window.confirm(\"Restart cards? Click 'cancel' to return to the homepage\");\n            if (restartDeckConfirmed){\n                setCurrentCardIndex(0);\n                setIsFront(true);\n            }\n            else {\n                history.push(\"/\");\n            }\n        }\n    }\n\n    /**\n     * Returns JSX of when you don't have enough cards\n     */\n    const notEnoughCards = (\n        <div>\n            <p>Not enough cards</p>\n            <button>Add Cards</button>\n        </div>\n    )\n\n    /**\n     * There is a breadcrumb navigation bar with links to home /, followed by the name of the deck being studied, \n     * and finally the text Study (e.g., Home/Rendering In React/Study).\n     **/\n    const breadcrumb = (\n        <nav>\n            <ol className=\"breadcrumb\">\n                <li className=\"breadcrumb-item\">\n                    <Link to=\"/\">Home</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                    <Link to={`/decks/${deckId}`}>{selectedDeck.name}</Link>\n                </li>\n                <li className=\"breadcrumb-item\">\n                    Study\n                </li>\n            </ol>\n        </nav>\n    )\n    // if data hasn't completed fetching, show Loading text\n    if(loading) {\n        return <p>Loading...</p>\n    }\n    return (\n        <div>\n            { numCards <= 2 ? (\n                <div>\n                    {breadcrumb}\n                    {notEnoughCards}\n                </div>\n            ) : (\n                <div>  \n                    {breadcrumb}\n                    <title>{selectedDeck.title}</title>\n                    <div>\n                        <h4>\n                            { currentCardIndex + 1} of {selectedDeck.cards.length}\n                        </h4>\n                        <p>{ isFront? selectedDeck.cards[currentCardIndex].front : selectedDeck.cards[currentCardIndex].back}</p>\n                        { isFront && (\n                            <button onClick={flipCard}>Flip</button>\n                        )}\n                        { !isFront && (\n                            <button onClick={handleNextButtonClick}>Next</button>\n                        )}\n                    </div>\n                </div>\n            )}\n        </div>\n            );\n }\n\n\n export default Study;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}